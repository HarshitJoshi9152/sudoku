HARSHIT JOSHI   18/2/2020 5:15 PM

HARSHIT JOSHI   3/9/2020 00:07

came to know about script:type = "module" \
while trying to use `import util from "C:/backup/Documents/html/javaScript/projects/js_util/utility"`


i have been able to code the sudoku box and i also realised that the reason for 
one of the lines drawn in the canvas appearing differently is most of times the possiblity that
the last/first line may not have full space to get rendered (width wise).


QUERY
we cannot use const in simple loops but we can in 

for (const i in range(1,201)) {
    console.log(i)
}

....why ?

OBS

came to know why i was getting 

VM2295:1 Uncaught TypeError: Cannot set property '1' of undefined
    at <anonymous>:1:9
while trying to assign sudoku values from string to array.
    sudoku[Math.floor(i/9)][i%9] = nums[i];


DUMB ERROR 1:42

i was inspecting sudokus[0][0] repetedly in the console without realising it.
i thought that the value assignment loop was only assigning the first line of sudoku_nums_string
because of this and i spent quite some time working on it.

both ways work
    for (let i = 0; i < 9; i++) 
    {
        for (let j = 0; j < 9; j++)
        {
            sudoku[i][j] = nums[acc];
            acc++
        }
    }

    for (let i = 0; i < 81; i++){
        sudoku[Math.floor(i/9)][i%9] = nums[i];
    }

1:47 removed the range function coz NO NEED OF THAT


idea of generating sudoku vs transfering pre made sudokus from the kaggle database

QUERY
    renderValueInPlace = function(val, { x, y }) 
    {
        let x = this.x + this.unit * x;
        let y = this.y + this.unit * y;
        ctx.strokeText(val, x, y)
    }

    error :
         x has already been declared

should unit be decided mathematically or should the used be able to specify it ?
    mathematically i guess; 

    constructor(x, y, unit, ctx, sudokuMap, fs)
    {
        this.sudokuMap = sudokuMap;
        this.unit = unit;
        this.x = x, this.y = y;
        this.ctx = ctx;
        this.digitPadding = unit/2;
        this.fontSize = fs
    }


this.unit = (e-s)/9; vs this.unit = e-s/9;

font size should also be decided mathematically

i want to learn about vs code tricks tips cutomisation and other cool stuff

selecting a font for programming
    bisquit font
    DejaVu Sans Mono
    ubuntu mono

14:13
theme currently being used 
gruvbox Material dark
some version of noctis
shades of purple

current font family :: Consolas, 'Courier New', monospace


HarshitJoshi9152 3/20/2020 5:13

i wasted my time trying to loop over matrixRangeValues([0,0],[5,2])
i still have to experiment with the matrixRangeValues() function 

4/12/2020 1:32 PM

all positions on the sudoku must be refered to by the coordinate system ie (x-pos, y-pos)
and NOT by the 2D array indexing system in which the 1st value would represent the y-pos and the
next the x-pos .That is why when getting the value from a cube we would use [2ndArg][1stArg] when the 
function accepts position in arguments as (1st: x-pos, 2nd: y-pos);

wrote a new function for getting matrix range indexes

newMatrixRangeMethod([0,6],[2,8]) does nt work because of division by zero in the
declaration of xval

WOW 1 simple correction fixed 3 errors // division by zero in declaration of yval var.

// testing code
const experimentalValues = [
    [[6,0],[8,2],"$"], // buggy
    [[7,2],[8,8],"!"], // buggy
    [[2,7],[6,8],"&"], // buggy lol
];

for (let i of experimentalValues) {
    console.table("testing for :", ...i);
    test_matrix_range(i[0], i[1], newMatrixRangeMethod, i[2] || "*");
}

but what was the difference between both the functions ?

refactored the main.js a little bit and moved the renamed newMatrixRangeMethod to getRangeCoors
and moved it to a new file

11:32 pm

so i just did <code>solver.getValue(solver.missingCoordinates[1]) == 0</code> and i got 
true then i did <code>solver.getValue(solver.missingCoordinates[1]) !== 0</code> and i still
got true. wtf javascript.

for full context
<code> // Solver Class
    getValue = (pos) => {
        return this.sudoku[pos[1]][pos[0]];
        // because in 2d array first y-pos is given then x-pos is given
    }

    // testingPurposes
    verifyMissingValues = () => {
        const missingValueObj = {};
        for (let i of this.missingCoordinates){
            if(this.getValue([i[0], i[1]]) !== 0){
                missingValueObj[i.toString()] = this.getValue([i[0], i[1]]);
            }
        }
        return missingValueObj;
    }
</code>

in javascript why are "0" == 0 and "0" !== 0 both true ?
oh i know now ... == allows coersion but === does not allow coersion.

even with the uncompatible coordinate system in different functions the
discrepancy were just 12 locations <code>Object.keys(solver.verifyMissingValues()).length</code>
wow !!

4/13/2020 3:55

there is no way of returning from a forEach loop


11:20
    // testing javascript snippets
    const admin = true;

    // generated with s-? snippet;
    admin ? sayHello() : Login();
    
    // generated with def snippet
    function sayHello(name) {
        return name;
    }
    function Login(cred) {
        // generated with fi snippet
        if (!cred)
            return "501 Not Authenticated";
    }

4/14/2020 12:00 

i came to know about the conspiracy of my lost git commits
and in VS CODE 
alt + LeftArrow || RightArrow  takes us to the starting and ending braces of the current lexical context;
                               // well i guess NOT
alt + UpArrow || DownArrow  moves the current line to the new location;

Currently coding the solver.solve method
    we have (partially to be honest) achieved the capability to map solution values for each 
    coordinate on the sudoku
    
    we should write that value to the sudoku if there is only 1 elm in any element's solutionBuffer and we
    should update other coordinate's solutionBuffer

    error while on solver.missingCoordinates[12]:
        solver.js:137 Uncaught TypeError: Cannot read property 'includes' of undefined
        at solver.js:137
        info:
            solver.missingCoordinates[12] === [2,2]
            PROBLEM IN IN COL
            ###SOLVED
    
    LOOP UNTIL THERE IS NO item left in solver.missingCoordinates

2/14/2020 7:38 pm

changing delete this.solutionsBuffer[bufferProp][this.solutionsBuffer[bufferProp].indexOf(val)];
to splice method so that we can easily confirm if there is only 1 solution left by checking
the elements length.

// WTF 24 broken cases in solver.solutionsBuffer;
everything was happening because of the -1 being returned from the indexOf method;

CHECKING TOTAL POSSIBLE SOLUTIONS WITHOUT $theseLines in the !j.includes(val) code
console.log("possible solutions :", possibleSolutions);
OUTPUT :: "possible solutions : 101"

$theseLines = // else {
              //     console.table(bufferProp, j, val);
              //     this.solutionsBuffer.push(val);
              // }

TOTAL POSSIBLE SOLUTIONS WITH $theseLines
OUTPUT :: "possible solutions : 513"

WAAAAIIIITTTTT THIS LINE DUCKED UP !!!!!!!!!!!!!! WE HAVE THE SAME VALUES SAVED MULTIPLE TIMES NOW.

fouund you i watched out for this.solutionsBuffer[bufferProp].not
but didnt watch out for 
!this.solutionsBuffer[bufferProp].not.includes(val) && !this.solutionsBuffer[bufferProp].includes(val)

WHY DIDNT I DECLARE this.solutionsBuffer[bufferProp].not AND this.solutionsBuffer[bufferProp] IN THE STARTING OF THE CODE BLOCK
waitt.... what if i just change the order in which the condition statements are written.

wrote this code 
<code>
let _ = false;
if(this.solutionsBuffer[bufferProp].not && (_=true) && !this.solutionsBuffer[bufferProp].not.includes(val) && !this.solutionsBuffer[bufferProp].includes(val)) {
    this.solutionsBuffer[bufferProp].push(val);
    }
        else if(!this.solutionsBuffer[bufferProp].includes(val) && !_){
            console.table(bufferProp, j, val);
            // debugger;
            this.solutionsBuffer[bufferProp].push(val);
    }
} 
</code>
still 101

but with this code we have 
solver.solutionsBuffer["0,2"] >>> ["8", "9", "2", not: Array(6)]
and without it we have
solver.solutionsBuffer["0,2"] >>> ["8", "9", "2", not: Array(6)]

this is because it is highly unlikely that the value ("2" in this case will not appear )

refactored the code a little bit. this is how it looks now
<code>
    solve = () => {
        const vals = ["1","2","3","4","5","6","7","8","9"];

        for (let i of this.missingCoordinates){
            const bufferProp = i.toString();
            this.solutionsBuffer[bufferProp] = [];
            this.solutionsBuffer[bufferProp].not = [];

            const row = this.rows[i[1]]; // subtract the set of the missing values in this
            const col = this.cols[i[0]];
            const grid = this.findGrid(i);
            
            for (let j of [row,col,grid]) {
                vals.forEach( val => {
                    // each value is tested for if it is included in the currently being looped over row, col or grid
                    if(!j.includes(val)){
                        if(!this.solutionsBuffer[bufferProp].not.includes(val) && !this.solutionsBuffer[bufferProp].includes(val))
                            this.solutionsBuffer[bufferProp].push(val);
                    } 
                    else {
                        if (this.solutionsBuffer[bufferProp].includes(val))
                                this.solutionsBuffer[bufferProp].splice(this.solutionsBuffer[bufferProp].indexOf(val),1);
                            
                        if(!this.solutionsBuffer[bufferProp].not.includes(val))
                                this.solutionsBuffer[bufferProp].not.push(val);
                    }
                });
            }
        }

        let possibleSolutions = 0;
        const sol = [];
        for (let i in this.solutionsBuffer) {
            const elm = this.solutionsBuffer[i];
            if (elm.length == 1) {
                // put down the value and remove the coordinate from missing values list and also this.solutionsBuffer;
                sol.push("lol");
            }
            else if (elm.length > 1) {
                // do nothing really.........
            }
            else {
                // elm.length is < 0 ; which means that there is no possible solution
                // alert("the sudoku puzzle is Invalid/Broken")
                console.error(elm, elm.length, i);
                // WTF 24 broken cases in solver.solutionsBuffer;
            }
            possibleSolutions += elm.length;
        }
        console.log(possibleSolutions);
    }
</code>

can i replace the .includes with in keyword ?


1:11 am
we removed the values from this.missingCoordinates but did not remove them from this.solutionBuffer;
but still solved.length goes from 14 to 17 and then gets stuck on 19;

to check further we have to render the solutions on screen
RENDERED !!! render.renderValues(true);
maybe if we re analyse or reset the sudoku with solver.setSudoku

we didnt have to specially setup a way to identify and remove the missing coordinates that were filled
we could have just use solver.analyse

solver.setSudoku WORKED !!!!!!!!!!!!!!!!!!!!!!!!!

THE SUDOKU GOT SOLVED !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
1:33 am

4/28/2020 12:57 am
worked on the gen_sudo() to generate random valid sudokus
came to know about the diff between [[]].toString() vs [[]].join(",");

//todo
work on the js_util project and make a function that returns an array filled with arg provided 
    // something that allows Array(10, elm: Array(10, elm: 0));
    // improve the range function by using arguments.length
    // incorporate the use of the function in the main.js file of this project


try executing setup() code on the randomly generated sudokus;

4/20/2020

tried to solve some randomly generated sudokus, most of them ran.
the errors were showing up because the solved rows couldnt be solved further.
and when $seed in gen_sudo() is 26 the solver is unable to solve the generated sudoku
because it has no exact solutions for any spot and we will have to use trial and error to solve it.

/////////////////////////////////////


idea for js_util lib

length determining function for associative arrays !!

4/23/2020 00:49 am
make a trello board

realpython
mastermachinelearning
kaggle python.org
w3c
js tuts, courses, book, youtube
algorithms and datastructures

lua go
python
js cppW

regexp
github
npm
vim

comp coding
hack the box
google coding competitions

sudoku app
    interactive gui
    image recognition
space-fighters game
continue the pixel processing work in drawJS

QUERY how to use vs compiler outside vs, and info on vscode cpp workflow

prettyPrint, requests, beautifulSoup, lodash


cli apps
    notes app
    music player
    package manager

dictionary api usage in python for cheating in tv game
accounting application

TASKS
    make a python private git repo.
    correct the ducked up .gitignore file.
    learn basic css to make a good gui.
    Document your code.
    view you bookmarks and saved things.
    JAMStack conf.
        wes box talk

--- MATHEMATICS ---
codingMath
the coding train
    linear algebra
    making a 3d engine
3blue1brown
    essence of linear algebra
    quarantine mathematics


long shots
    implementing irc RFC in nodejs
    firmware reverse engineering
    library for better development on multiple devices


4/28/2020 12:57 am

JS topics to understand // most from the pluralsight js test

js nuggets
es6+
EVENTS DOM
.next, generators
object oriented javascript
spread vs rest
"How should a for...in loop be constrained to iterate over only those properties that belong to the object itself?"
 -> "Filter using the object's hasOwnProperty method."

 What is the intent of the following code snippet?

function Person(name) {
   if (!(this instanceof Person)) {
     return new Person(name);
   }  
   this.name = name;
}

.bind .apply etc
[arguments] vs Array.from(arguments) // experiment typeof arguments

static keyword

with, yield and function* keywords

how to overwrite the prototype chain.

learn writing documentation



WORK
worked on the gen_sudo() to generate random valid sudokus
came to know about the diff between [[]].toString() vs [[]].join(",");

//todo
work on the js_util project and make a function that returns an array filled with arg provided 
    // something that allows Array(10, elm: Array(10, elm: 0));
    // improve the range function by using arguments.length
    // incorporate the use of the function in the main.js file of this project


try executing setup() code on the randomly generated sudokus;

4/29/2020 12:29 pm

current-theme: andromeda colorized

4/30/2020 8:20 pm

now i know why we have `get` keyword inside classes
<code>
class Arithmetic {
  // add getter for value
  get val() {
    return this.value;
  }
  
  // rest of the code truncated for clarity
}


a = new Arithmetic()
a.sum(1, 3, 6)   // => { value: 10 } 
  .subtract(3)   // => { value: 7 }
  .add(4)        // => { value: 11 }
  .val           // <== read the result of the computation  
</code>